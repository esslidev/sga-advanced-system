services:
  # sga-dns:
  #  container_name: sga-dns
  #  image: ubuntu/bind9:latest
  #  environment:
  #    - BIND9_USER=root
  #    - TZ=Africa/Casablanca
  #  ports:
  #    - "53:53/udp"
  #    - "53:53/tcp"
  #    - "953:953/tcp"
  #  volumes:
  #    - ./dns-config:/etc/bind
  #    - ./dns-zones:/var/lib/bind
  #  restart: unless-stopped
  #  networks:
  #    - sga_networks

  # Reverse proxy to handle domain routing
  #nginx-proxy:
  #  container_name: nginx-proxy
  #  image: nginx:alpine
  #  ports:
  #    - "80:80"
  #    - "443:443"
  #  volumes:
  #    - ./nginx.conf:/etc/nginx/nginx.conf
  #  depends_on:
  #    - sga-backend
  #    - php-my-admin
  #  networks:
  #    - sga_networks

  db_sga:
    container_name: db_sga
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    ports:
      - 3307:${DB_PORT}
    networks:
      - sga_networks
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-p${DB_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 20

  php-my-admin:
    container_name: php-my-admin
    image: phpmyadmin:latest
    restart: always
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_ARBITRARY: 1
    ports:
      - 8081:80
    networks:
      - sga_networks

  sga-backend:
    container_name: sga-backend
    stdin_open: true
    tty: true
    command: sh -c "yarn start & yarn run studio"
    restart: always
    build:
      context: ./sga_backend
      dockerfile: Dockerfile
    ports:
      - "${API_PORT}:${API_PORT}"
      - "${STUDIO_PORT}:${STUDIO_PORT}"
    #expose:
    #  - "4003"
    #  - "5555"
    depends_on:
      db_sga:
        condition: service_healthy

    env_file:
      - .env
    networks:
      - sga_networks

  #sga-frontend:
  #  container_name: sga-frontend
  #  build:
  #    context: ./sga_frontend
  #    dockerfile: Dockerfile
  #  ports:
  #    - "${FRONTEND_PORT}:${FRONTEND_PORT}"
  #  restart: always
  #  depends_on:
  #    - sga-backend
  #  networks:
  #    - sga_networks

networks:
  sga_networks:
    driver: bridge
